rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email == "aleczaitz@gmail.com";
    }

    // Helper function to check if user is a participant in the conversation
    function isParticipant(participantIds) {
      return isAuthenticated() && participantIds.hasAny([request.auth.uid]);
    }

    // Helper function to check if this is a test operation
    function isTestEmail(email) {
      return email == 'testhost@example.com' || email == 'testrenter@example.com';
    }

    function isTestData() {
      return ('email' in resource.data && isTestEmail(resource.data.email)) ||
             ('hostEmail' in resource.data && isTestEmail(resource.data.hostEmail)) ||
             ('renterEmail' in resource.data && isTestEmail(resource.data.renterEmail)) ||
             ('senderId' in resource.data && isTestEmail(resource.data.senderId)) ||
             ('receiverId' in resource.data && isTestEmail(resource.data.receiverId));
    }

    // Events rules
    match /events/{eventId} {
      allow read: if true;  // Allow public read access
      allow write: if isAuthenticated();
    }

    // Driveways rules
    match /driveways/{drivewayId} {
      allow read: if true;  // Allow public read access
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (isOwner(resource.data.ownerId) || isAdmin());
    }

    // Parking spots rules
    match /parkingSpots/{spotId} {
      allow read: if true;  // Allow public read access
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.ownerId)
      || (
        isAuthenticated()
        && resource.data.status == "available"
        && request.resource.data.status == "booked"
        && request.resource.data.keys().hasOnly(resource.data.keys())
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(["status"])
      );
      allow delete: if isOwner(resource.data.ownerId);
    }

    // Bookings rules
    match /bookings/{bookingId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isOwner(resource.data.hostId));
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (isOwner(resource.data.userId) || isOwner(resource.data.hostId));
    }

    // User profiles rules
    match /users/{userId} {
      allow read: if true;  // Allow reading user profiles
      allow create: if true;  // Allow creating test users
      allow update: if isOwner(userId);
      allow delete: if resource.data.email == 'testhost@example.com' || resource.data.email == 'testrenter@example.com';  // Allow deleting test users
    }

    // Messages rules
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.senderId) || isOwner(resource.data.receiverId));
      allow create: if isAuthenticated();
    }

    // Conversations rules
    match /conversations/{conversationId} {
      allow read: if true;  // Allow reading conversations for testing
      allow create: if true;  // Allow creating conversations for testing
      allow update: if true;  // Allow updating conversations for testing
      allow delete: if true;  // Allow deleting test conversations

      match /messages/{messageId} {
        allow read: if true;
        allow write: if true;
      }
    }

    // Payment intents collection
    match /paymentIntents/{paymentIntentId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated();
      allow update: if false; // Payment intents should not be updated
      allow delete: if false; // Payment intents should not be deleted
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 